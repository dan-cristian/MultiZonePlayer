// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace kuradatatypes {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Kurapayload {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_kuradatatypes_KuraPayload__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::kuradatatypes.KuraPayload, global::kuradatatypes.KuraPayload.Builder> internal__static_kuradatatypes_KuraPayload__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_kuradatatypes_KuraPayload_KuraMetric__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::kuradatatypes.KuraPayload.Types.KuraMetric, global::kuradatatypes.KuraPayload.Types.KuraMetric.Builder> internal__static_kuradatatypes_KuraPayload_KuraMetric__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_kuradatatypes_KuraPayload_KuraPosition__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::kuradatatypes.KuraPayload.Types.KuraPosition, global::kuradatatypes.KuraPayload.Types.KuraPosition.Builder> internal__static_kuradatatypes_KuraPayload_KuraPosition__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Kurapayload() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChFrdXJhcGF5bG9hZC5wcm90bxINa3VyYWRhdGF0eXBlcyKjBQoLS3VyYVBh" + 
          "eWxvYWQSEQoJdGltZXN0YW1wGAEgASgDEjkKCHBvc2l0aW9uGAIgASgLMicu" + 
          "a3VyYWRhdGF0eXBlcy5LdXJhUGF5bG9hZC5LdXJhUG9zaXRpb24SNgoGbWV0" + 
          "cmljGIgnIAMoCzIlLmt1cmFkYXRhdHlwZXMuS3VyYVBheWxvYWQuS3VyYU1l" + 
          "dHJpYxINCgRib2R5GIknIAEoDBrFAgoKS3VyYU1ldHJpYxIMCgRuYW1lGAEg" + 
          "AigJEj0KBHR5cGUYAiACKA4yLy5rdXJhZGF0YXR5cGVzLkt1cmFQYXlsb2Fk" + 
          "Lkt1cmFNZXRyaWMuVmFsdWVUeXBlEhQKDGRvdWJsZV92YWx1ZRgDIAEoARIT" + 
          "CgtmbG9hdF92YWx1ZRgEIAEoAhISCgpsb25nX3ZhbHVlGAUgASgDEhEKCWlu" + 
          "dF92YWx1ZRgGIAEoBRISCgpib29sX3ZhbHVlGAcgASgIEhQKDHN0cmluZ192" + 
          "YWx1ZRgIIAEoCRITCgtieXRlc192YWx1ZRgJIAEoDCJZCglWYWx1ZVR5cGUS" + 
          "CgoGRE9VQkxFEAASCQoFRkxPQVQQARIJCgVJTlQ2NBACEgkKBUlOVDMyEAMS" + 
          "CAoEQk9PTBAEEgoKBlNUUklORxAFEgkKBUJZVEVTEAYarwEKDEt1cmFQb3Np" + 
          "dGlvbhIQCghsYXRpdHVkZRgBIAIoARIRCglsb25naXR1ZGUYAiACKAESEAoI" + 
          "YWx0aXR1ZGUYAyABKAESEQoJcHJlY2lzaW9uGAQgASgBEg8KB2hlYWRpbmcY" + 
          "BSABKAESDQoFc3BlZWQYBiABKAESEQoJdGltZXN0YW1wGAcgASgDEhIKCnNh" + 
          "dGVsbGl0ZXMYCCABKAUSDgoGc3RhdHVzGAkgASgFKgUIAxCIJ0I6CiZvcmcu" + 
          "ZWNsaXBzZS5rdXJhLmNvcmUubWVzc2FnZS5wcm90b2J1ZkIQS3VyYVBheWxv" + 
          "YWRQcm90bw==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_kuradatatypes_KuraPayload__Descriptor = Descriptor.MessageTypes[0];
        internal__static_kuradatatypes_KuraPayload__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::kuradatatypes.KuraPayload, global::kuradatatypes.KuraPayload.Builder>(internal__static_kuradatatypes_KuraPayload__Descriptor,
                new string[] { "Timestamp", "Position", "Metric", "Body", });
        internal__static_kuradatatypes_KuraPayload_KuraMetric__Descriptor = internal__static_kuradatatypes_KuraPayload__Descriptor.NestedTypes[0];
        internal__static_kuradatatypes_KuraPayload_KuraMetric__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::kuradatatypes.KuraPayload.Types.KuraMetric, global::kuradatatypes.KuraPayload.Types.KuraMetric.Builder>(internal__static_kuradatatypes_KuraPayload_KuraMetric__Descriptor,
                new string[] { "Name", "Type", "DoubleValue", "FloatValue", "LongValue", "IntValue", "BoolValue", "StringValue", "BytesValue", });
        internal__static_kuradatatypes_KuraPayload_KuraPosition__Descriptor = internal__static_kuradatatypes_KuraPayload__Descriptor.NestedTypes[1];
        internal__static_kuradatatypes_KuraPayload_KuraPosition__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::kuradatatypes.KuraPayload.Types.KuraPosition, global::kuradatatypes.KuraPayload.Types.KuraPosition.Builder>(internal__static_kuradatatypes_KuraPayload_KuraPosition__Descriptor,
                new string[] { "Latitude", "Longitude", "Altitude", "Precision", "Heading", "Speed", "Timestamp", "Satellites", "Status", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class KuraPayload : pb::ExtendableMessage<KuraPayload, KuraPayload.Builder> {
    private KuraPayload() { }
    private static readonly KuraPayload defaultInstance = new KuraPayload().MakeReadOnly();
    private static readonly string[] _kuraPayloadFieldNames = new string[] { "body", "metric", "position", "timestamp" };
    private static readonly uint[] _kuraPayloadFieldTags = new uint[] { 40010, 40002, 18, 8 };
    public static KuraPayload DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override KuraPayload DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override KuraPayload ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::kuradatatypes.Kurapayload.internal__static_kuradatatypes_KuraPayload__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<KuraPayload, KuraPayload.Builder> InternalFieldAccessors {
      get { return global::kuradatatypes.Kurapayload.internal__static_kuradatatypes_KuraPayload__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class KuraMetric : pb::GeneratedMessage<KuraMetric, KuraMetric.Builder> {
        private KuraMetric() { }
        private static readonly KuraMetric defaultInstance = new KuraMetric().MakeReadOnly();
        private static readonly string[] _kuraMetricFieldNames = new string[] { "bool_value", "bytes_value", "double_value", "float_value", "int_value", "long_value", "name", "string_value", "type" };
        private static readonly uint[] _kuraMetricFieldTags = new uint[] { 56, 74, 25, 37, 48, 40, 10, 66, 16 };
        public static KuraMetric DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override KuraMetric DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override KuraMetric ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::kuradatatypes.Kurapayload.internal__static_kuradatatypes_KuraPayload_KuraMetric__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<KuraMetric, KuraMetric.Builder> InternalFieldAccessors {
          get { return global::kuradatatypes.Kurapayload.internal__static_kuradatatypes_KuraPayload_KuraMetric__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          public enum ValueType {
            DOUBLE = 0,
            FLOAT = 1,
            INT64 = 2,
            INT32 = 3,
            BOOL = 4,
            STRING = 5,
            BYTES = 6,
          }
          
        }
        #endregion
        
        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int TypeFieldNumber = 2;
        private bool hasType;
        private global::kuradatatypes.KuraPayload.Types.KuraMetric.Types.ValueType type_ = global::kuradatatypes.KuraPayload.Types.KuraMetric.Types.ValueType.DOUBLE;
        public bool HasType {
          get { return hasType; }
        }
        public global::kuradatatypes.KuraPayload.Types.KuraMetric.Types.ValueType Type {
          get { return type_; }
        }
        
        public const int DoubleValueFieldNumber = 3;
        private bool hasDoubleValue;
        private double doubleValue_;
        public bool HasDoubleValue {
          get { return hasDoubleValue; }
        }
        public double DoubleValue {
          get { return doubleValue_; }
        }
        
        public const int FloatValueFieldNumber = 4;
        private bool hasFloatValue;
        private float floatValue_;
        public bool HasFloatValue {
          get { return hasFloatValue; }
        }
        public float FloatValue {
          get { return floatValue_; }
        }
        
        public const int LongValueFieldNumber = 5;
        private bool hasLongValue;
        private long longValue_;
        public bool HasLongValue {
          get { return hasLongValue; }
        }
        public long LongValue {
          get { return longValue_; }
        }
        
        public const int IntValueFieldNumber = 6;
        private bool hasIntValue;
        private int intValue_;
        public bool HasIntValue {
          get { return hasIntValue; }
        }
        public int IntValue {
          get { return intValue_; }
        }
        
        public const int BoolValueFieldNumber = 7;
        private bool hasBoolValue;
        private bool boolValue_;
        public bool HasBoolValue {
          get { return hasBoolValue; }
        }
        public bool BoolValue {
          get { return boolValue_; }
        }
        
        public const int StringValueFieldNumber = 8;
        private bool hasStringValue;
        private string stringValue_ = "";
        public bool HasStringValue {
          get { return hasStringValue; }
        }
        public string StringValue {
          get { return stringValue_; }
        }
        
        public const int BytesValueFieldNumber = 9;
        private bool hasBytesValue;
        private pb::ByteString bytesValue_ = pb::ByteString.Empty;
        public bool HasBytesValue {
          get { return hasBytesValue; }
        }
        public pb::ByteString BytesValue {
          get { return bytesValue_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasName) return false;
            if (!hasType) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _kuraMetricFieldNames;
          if (hasName) {
            output.WriteString(1, field_names[6], Name);
          }
          if (hasType) {
            output.WriteEnum(2, field_names[8], (int) Type, Type);
          }
          if (hasDoubleValue) {
            output.WriteDouble(3, field_names[2], DoubleValue);
          }
          if (hasFloatValue) {
            output.WriteFloat(4, field_names[3], FloatValue);
          }
          if (hasLongValue) {
            output.WriteInt64(5, field_names[5], LongValue);
          }
          if (hasIntValue) {
            output.WriteInt32(6, field_names[4], IntValue);
          }
          if (hasBoolValue) {
            output.WriteBool(7, field_names[0], BoolValue);
          }
          if (hasStringValue) {
            output.WriteString(8, field_names[7], StringValue);
          }
          if (hasBytesValue) {
            output.WriteBytes(9, field_names[1], BytesValue);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasName) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Name);
            }
            if (hasType) {
              size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
            }
            if (hasDoubleValue) {
              size += pb::CodedOutputStream.ComputeDoubleSize(3, DoubleValue);
            }
            if (hasFloatValue) {
              size += pb::CodedOutputStream.ComputeFloatSize(4, FloatValue);
            }
            if (hasLongValue) {
              size += pb::CodedOutputStream.ComputeInt64Size(5, LongValue);
            }
            if (hasIntValue) {
              size += pb::CodedOutputStream.ComputeInt32Size(6, IntValue);
            }
            if (hasBoolValue) {
              size += pb::CodedOutputStream.ComputeBoolSize(7, BoolValue);
            }
            if (hasStringValue) {
              size += pb::CodedOutputStream.ComputeStringSize(8, StringValue);
            }
            if (hasBytesValue) {
              size += pb::CodedOutputStream.ComputeBytesSize(9, BytesValue);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static KuraMetric ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KuraMetric ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KuraMetric ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KuraMetric ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KuraMetric ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KuraMetric ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static KuraMetric ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static KuraMetric ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static KuraMetric ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KuraMetric ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private KuraMetric MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(KuraMetric prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<KuraMetric, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(KuraMetric cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private KuraMetric result;
          
          private KuraMetric PrepareBuilder() {
            if (resultIsReadOnly) {
              KuraMetric original = result;
              result = new KuraMetric();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override KuraMetric MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::kuradatatypes.KuraPayload.Types.KuraMetric.Descriptor; }
          }
          
          public override KuraMetric DefaultInstanceForType {
            get { return global::kuradatatypes.KuraPayload.Types.KuraMetric.DefaultInstance; }
          }
          
          public override KuraMetric BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is KuraMetric) {
              return MergeFrom((KuraMetric) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(KuraMetric other) {
            if (other == global::kuradatatypes.KuraPayload.Types.KuraMetric.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.HasType) {
              Type = other.Type;
            }
            if (other.HasDoubleValue) {
              DoubleValue = other.DoubleValue;
            }
            if (other.HasFloatValue) {
              FloatValue = other.FloatValue;
            }
            if (other.HasLongValue) {
              LongValue = other.LongValue;
            }
            if (other.HasIntValue) {
              IntValue = other.IntValue;
            }
            if (other.HasBoolValue) {
              BoolValue = other.BoolValue;
            }
            if (other.HasStringValue) {
              StringValue = other.StringValue;
            }
            if (other.HasBytesValue) {
              BytesValue = other.BytesValue;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_kuraMetricFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _kuraMetricFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 16: {
                  object unknown;
                  if(input.ReadEnum(ref result.type_, out unknown)) {
                    result.hasType = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(2, (ulong)(int)unknown);
                  }
                  break;
                }
                case 25: {
                  result.hasDoubleValue = input.ReadDouble(ref result.doubleValue_);
                  break;
                }
                case 37: {
                  result.hasFloatValue = input.ReadFloat(ref result.floatValue_);
                  break;
                }
                case 40: {
                  result.hasLongValue = input.ReadInt64(ref result.longValue_);
                  break;
                }
                case 48: {
                  result.hasIntValue = input.ReadInt32(ref result.intValue_);
                  break;
                }
                case 56: {
                  result.hasBoolValue = input.ReadBool(ref result.boolValue_);
                  break;
                }
                case 66: {
                  result.hasStringValue = input.ReadString(ref result.stringValue_);
                  break;
                }
                case 74: {
                  result.hasBytesValue = input.ReadBytes(ref result.bytesValue_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public bool HasType {
           get { return result.hasType; }
          }
          public global::kuradatatypes.KuraPayload.Types.KuraMetric.Types.ValueType Type {
            get { return result.Type; }
            set { SetType(value); }
          }
          public Builder SetType(global::kuradatatypes.KuraPayload.Types.KuraMetric.Types.ValueType value) {
            PrepareBuilder();
            result.hasType = true;
            result.type_ = value;
            return this;
          }
          public Builder ClearType() {
            PrepareBuilder();
            result.hasType = false;
            result.type_ = global::kuradatatypes.KuraPayload.Types.KuraMetric.Types.ValueType.DOUBLE;
            return this;
          }
          
          public bool HasDoubleValue {
            get { return result.hasDoubleValue; }
          }
          public double DoubleValue {
            get { return result.DoubleValue; }
            set { SetDoubleValue(value); }
          }
          public Builder SetDoubleValue(double value) {
            PrepareBuilder();
            result.hasDoubleValue = true;
            result.doubleValue_ = value;
            return this;
          }
          public Builder ClearDoubleValue() {
            PrepareBuilder();
            result.hasDoubleValue = false;
            result.doubleValue_ = 0D;
            return this;
          }
          
          public bool HasFloatValue {
            get { return result.hasFloatValue; }
          }
          public float FloatValue {
            get { return result.FloatValue; }
            set { SetFloatValue(value); }
          }
          public Builder SetFloatValue(float value) {
            PrepareBuilder();
            result.hasFloatValue = true;
            result.floatValue_ = value;
            return this;
          }
          public Builder ClearFloatValue() {
            PrepareBuilder();
            result.hasFloatValue = false;
            result.floatValue_ = 0F;
            return this;
          }
          
          public bool HasLongValue {
            get { return result.hasLongValue; }
          }
          public long LongValue {
            get { return result.LongValue; }
            set { SetLongValue(value); }
          }
          public Builder SetLongValue(long value) {
            PrepareBuilder();
            result.hasLongValue = true;
            result.longValue_ = value;
            return this;
          }
          public Builder ClearLongValue() {
            PrepareBuilder();
            result.hasLongValue = false;
            result.longValue_ = 0L;
            return this;
          }
          
          public bool HasIntValue {
            get { return result.hasIntValue; }
          }
          public int IntValue {
            get { return result.IntValue; }
            set { SetIntValue(value); }
          }
          public Builder SetIntValue(int value) {
            PrepareBuilder();
            result.hasIntValue = true;
            result.intValue_ = value;
            return this;
          }
          public Builder ClearIntValue() {
            PrepareBuilder();
            result.hasIntValue = false;
            result.intValue_ = 0;
            return this;
          }
          
          public bool HasBoolValue {
            get { return result.hasBoolValue; }
          }
          public bool BoolValue {
            get { return result.BoolValue; }
            set { SetBoolValue(value); }
          }
          public Builder SetBoolValue(bool value) {
            PrepareBuilder();
            result.hasBoolValue = true;
            result.boolValue_ = value;
            return this;
          }
          public Builder ClearBoolValue() {
            PrepareBuilder();
            result.hasBoolValue = false;
            result.boolValue_ = false;
            return this;
          }
          
          public bool HasStringValue {
            get { return result.hasStringValue; }
          }
          public string StringValue {
            get { return result.StringValue; }
            set { SetStringValue(value); }
          }
          public Builder SetStringValue(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasStringValue = true;
            result.stringValue_ = value;
            return this;
          }
          public Builder ClearStringValue() {
            PrepareBuilder();
            result.hasStringValue = false;
            result.stringValue_ = "";
            return this;
          }
          
          public bool HasBytesValue {
            get { return result.hasBytesValue; }
          }
          public pb::ByteString BytesValue {
            get { return result.BytesValue; }
            set { SetBytesValue(value); }
          }
          public Builder SetBytesValue(pb::ByteString value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasBytesValue = true;
            result.bytesValue_ = value;
            return this;
          }
          public Builder ClearBytesValue() {
            PrepareBuilder();
            result.hasBytesValue = false;
            result.bytesValue_ = pb::ByteString.Empty;
            return this;
          }
        }
        static KuraMetric() {
          object.ReferenceEquals(global::kuradatatypes.Kurapayload.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class KuraPosition : pb::GeneratedMessage<KuraPosition, KuraPosition.Builder> {
        private KuraPosition() { }
        private static readonly KuraPosition defaultInstance = new KuraPosition().MakeReadOnly();
        private static readonly string[] _kuraPositionFieldNames = new string[] { "altitude", "heading", "latitude", "longitude", "precision", "satellites", "speed", "status", "timestamp" };
        private static readonly uint[] _kuraPositionFieldTags = new uint[] { 25, 41, 9, 17, 33, 64, 49, 72, 56 };
        public static KuraPosition DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override KuraPosition DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override KuraPosition ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::kuradatatypes.Kurapayload.internal__static_kuradatatypes_KuraPayload_KuraPosition__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<KuraPosition, KuraPosition.Builder> InternalFieldAccessors {
          get { return global::kuradatatypes.Kurapayload.internal__static_kuradatatypes_KuraPayload_KuraPosition__FieldAccessorTable; }
        }
        
        public const int LatitudeFieldNumber = 1;
        private bool hasLatitude;
        private double latitude_;
        public bool HasLatitude {
          get { return hasLatitude; }
        }
        public double Latitude {
          get { return latitude_; }
        }
        
        public const int LongitudeFieldNumber = 2;
        private bool hasLongitude;
        private double longitude_;
        public bool HasLongitude {
          get { return hasLongitude; }
        }
        public double Longitude {
          get { return longitude_; }
        }
        
        public const int AltitudeFieldNumber = 3;
        private bool hasAltitude;
        private double altitude_;
        public bool HasAltitude {
          get { return hasAltitude; }
        }
        public double Altitude {
          get { return altitude_; }
        }
        
        public const int PrecisionFieldNumber = 4;
        private bool hasPrecision;
        private double precision_;
        public bool HasPrecision {
          get { return hasPrecision; }
        }
        public double Precision {
          get { return precision_; }
        }
        
        public const int HeadingFieldNumber = 5;
        private bool hasHeading;
        private double heading_;
        public bool HasHeading {
          get { return hasHeading; }
        }
        public double Heading {
          get { return heading_; }
        }
        
        public const int SpeedFieldNumber = 6;
        private bool hasSpeed;
        private double speed_;
        public bool HasSpeed {
          get { return hasSpeed; }
        }
        public double Speed {
          get { return speed_; }
        }
        
        public const int TimestampFieldNumber = 7;
        private bool hasTimestamp;
        private long timestamp_;
        public bool HasTimestamp {
          get { return hasTimestamp; }
        }
        public long Timestamp {
          get { return timestamp_; }
        }
        
        public const int SatellitesFieldNumber = 8;
        private bool hasSatellites;
        private int satellites_;
        public bool HasSatellites {
          get { return hasSatellites; }
        }
        public int Satellites {
          get { return satellites_; }
        }
        
        public const int StatusFieldNumber = 9;
        private bool hasStatus;
        private int status_;
        public bool HasStatus {
          get { return hasStatus; }
        }
        public int Status {
          get { return status_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasLatitude) return false;
            if (!hasLongitude) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _kuraPositionFieldNames;
          if (hasLatitude) {
            output.WriteDouble(1, field_names[2], Latitude);
          }
          if (hasLongitude) {
            output.WriteDouble(2, field_names[3], Longitude);
          }
          if (hasAltitude) {
            output.WriteDouble(3, field_names[0], Altitude);
          }
          if (hasPrecision) {
            output.WriteDouble(4, field_names[4], Precision);
          }
          if (hasHeading) {
            output.WriteDouble(5, field_names[1], Heading);
          }
          if (hasSpeed) {
            output.WriteDouble(6, field_names[6], Speed);
          }
          if (hasTimestamp) {
            output.WriteInt64(7, field_names[8], Timestamp);
          }
          if (hasSatellites) {
            output.WriteInt32(8, field_names[5], Satellites);
          }
          if (hasStatus) {
            output.WriteInt32(9, field_names[7], Status);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasLatitude) {
              size += pb::CodedOutputStream.ComputeDoubleSize(1, Latitude);
            }
            if (hasLongitude) {
              size += pb::CodedOutputStream.ComputeDoubleSize(2, Longitude);
            }
            if (hasAltitude) {
              size += pb::CodedOutputStream.ComputeDoubleSize(3, Altitude);
            }
            if (hasPrecision) {
              size += pb::CodedOutputStream.ComputeDoubleSize(4, Precision);
            }
            if (hasHeading) {
              size += pb::CodedOutputStream.ComputeDoubleSize(5, Heading);
            }
            if (hasSpeed) {
              size += pb::CodedOutputStream.ComputeDoubleSize(6, Speed);
            }
            if (hasTimestamp) {
              size += pb::CodedOutputStream.ComputeInt64Size(7, Timestamp);
            }
            if (hasSatellites) {
              size += pb::CodedOutputStream.ComputeInt32Size(8, Satellites);
            }
            if (hasStatus) {
              size += pb::CodedOutputStream.ComputeInt32Size(9, Status);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static KuraPosition ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KuraPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KuraPosition ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KuraPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KuraPosition ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KuraPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static KuraPosition ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static KuraPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static KuraPosition ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KuraPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private KuraPosition MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(KuraPosition prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<KuraPosition, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(KuraPosition cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private KuraPosition result;
          
          private KuraPosition PrepareBuilder() {
            if (resultIsReadOnly) {
              KuraPosition original = result;
              result = new KuraPosition();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override KuraPosition MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::kuradatatypes.KuraPayload.Types.KuraPosition.Descriptor; }
          }
          
          public override KuraPosition DefaultInstanceForType {
            get { return global::kuradatatypes.KuraPayload.Types.KuraPosition.DefaultInstance; }
          }
          
          public override KuraPosition BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is KuraPosition) {
              return MergeFrom((KuraPosition) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(KuraPosition other) {
            if (other == global::kuradatatypes.KuraPayload.Types.KuraPosition.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasLatitude) {
              Latitude = other.Latitude;
            }
            if (other.HasLongitude) {
              Longitude = other.Longitude;
            }
            if (other.HasAltitude) {
              Altitude = other.Altitude;
            }
            if (other.HasPrecision) {
              Precision = other.Precision;
            }
            if (other.HasHeading) {
              Heading = other.Heading;
            }
            if (other.HasSpeed) {
              Speed = other.Speed;
            }
            if (other.HasTimestamp) {
              Timestamp = other.Timestamp;
            }
            if (other.HasSatellites) {
              Satellites = other.Satellites;
            }
            if (other.HasStatus) {
              Status = other.Status;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_kuraPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _kuraPositionFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 9: {
                  result.hasLatitude = input.ReadDouble(ref result.latitude_);
                  break;
                }
                case 17: {
                  result.hasLongitude = input.ReadDouble(ref result.longitude_);
                  break;
                }
                case 25: {
                  result.hasAltitude = input.ReadDouble(ref result.altitude_);
                  break;
                }
                case 33: {
                  result.hasPrecision = input.ReadDouble(ref result.precision_);
                  break;
                }
                case 41: {
                  result.hasHeading = input.ReadDouble(ref result.heading_);
                  break;
                }
                case 49: {
                  result.hasSpeed = input.ReadDouble(ref result.speed_);
                  break;
                }
                case 56: {
                  result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
                  break;
                }
                case 64: {
                  result.hasSatellites = input.ReadInt32(ref result.satellites_);
                  break;
                }
                case 72: {
                  result.hasStatus = input.ReadInt32(ref result.status_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasLatitude {
            get { return result.hasLatitude; }
          }
          public double Latitude {
            get { return result.Latitude; }
            set { SetLatitude(value); }
          }
          public Builder SetLatitude(double value) {
            PrepareBuilder();
            result.hasLatitude = true;
            result.latitude_ = value;
            return this;
          }
          public Builder ClearLatitude() {
            PrepareBuilder();
            result.hasLatitude = false;
            result.latitude_ = 0D;
            return this;
          }
          
          public bool HasLongitude {
            get { return result.hasLongitude; }
          }
          public double Longitude {
            get { return result.Longitude; }
            set { SetLongitude(value); }
          }
          public Builder SetLongitude(double value) {
            PrepareBuilder();
            result.hasLongitude = true;
            result.longitude_ = value;
            return this;
          }
          public Builder ClearLongitude() {
            PrepareBuilder();
            result.hasLongitude = false;
            result.longitude_ = 0D;
            return this;
          }
          
          public bool HasAltitude {
            get { return result.hasAltitude; }
          }
          public double Altitude {
            get { return result.Altitude; }
            set { SetAltitude(value); }
          }
          public Builder SetAltitude(double value) {
            PrepareBuilder();
            result.hasAltitude = true;
            result.altitude_ = value;
            return this;
          }
          public Builder ClearAltitude() {
            PrepareBuilder();
            result.hasAltitude = false;
            result.altitude_ = 0D;
            return this;
          }
          
          public bool HasPrecision {
            get { return result.hasPrecision; }
          }
          public double Precision {
            get { return result.Precision; }
            set { SetPrecision(value); }
          }
          public Builder SetPrecision(double value) {
            PrepareBuilder();
            result.hasPrecision = true;
            result.precision_ = value;
            return this;
          }
          public Builder ClearPrecision() {
            PrepareBuilder();
            result.hasPrecision = false;
            result.precision_ = 0D;
            return this;
          }
          
          public bool HasHeading {
            get { return result.hasHeading; }
          }
          public double Heading {
            get { return result.Heading; }
            set { SetHeading(value); }
          }
          public Builder SetHeading(double value) {
            PrepareBuilder();
            result.hasHeading = true;
            result.heading_ = value;
            return this;
          }
          public Builder ClearHeading() {
            PrepareBuilder();
            result.hasHeading = false;
            result.heading_ = 0D;
            return this;
          }
          
          public bool HasSpeed {
            get { return result.hasSpeed; }
          }
          public double Speed {
            get { return result.Speed; }
            set { SetSpeed(value); }
          }
          public Builder SetSpeed(double value) {
            PrepareBuilder();
            result.hasSpeed = true;
            result.speed_ = value;
            return this;
          }
          public Builder ClearSpeed() {
            PrepareBuilder();
            result.hasSpeed = false;
            result.speed_ = 0D;
            return this;
          }
          
          public bool HasTimestamp {
            get { return result.hasTimestamp; }
          }
          public long Timestamp {
            get { return result.Timestamp; }
            set { SetTimestamp(value); }
          }
          public Builder SetTimestamp(long value) {
            PrepareBuilder();
            result.hasTimestamp = true;
            result.timestamp_ = value;
            return this;
          }
          public Builder ClearTimestamp() {
            PrepareBuilder();
            result.hasTimestamp = false;
            result.timestamp_ = 0L;
            return this;
          }
          
          public bool HasSatellites {
            get { return result.hasSatellites; }
          }
          public int Satellites {
            get { return result.Satellites; }
            set { SetSatellites(value); }
          }
          public Builder SetSatellites(int value) {
            PrepareBuilder();
            result.hasSatellites = true;
            result.satellites_ = value;
            return this;
          }
          public Builder ClearSatellites() {
            PrepareBuilder();
            result.hasSatellites = false;
            result.satellites_ = 0;
            return this;
          }
          
          public bool HasStatus {
            get { return result.hasStatus; }
          }
          public int Status {
            get { return result.Status; }
            set { SetStatus(value); }
          }
          public Builder SetStatus(int value) {
            PrepareBuilder();
            result.hasStatus = true;
            result.status_ = value;
            return this;
          }
          public Builder ClearStatus() {
            PrepareBuilder();
            result.hasStatus = false;
            result.status_ = 0;
            return this;
          }
        }
        static KuraPosition() {
          object.ReferenceEquals(global::kuradatatypes.Kurapayload.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int TimestampFieldNumber = 1;
    private bool hasTimestamp;
    private long timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public long Timestamp {
      get { return timestamp_; }
    }
    
    public const int PositionFieldNumber = 2;
    private bool hasPosition;
    private global::kuradatatypes.KuraPayload.Types.KuraPosition position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::kuradatatypes.KuraPayload.Types.KuraPosition Position {
      get { return position_ ?? global::kuradatatypes.KuraPayload.Types.KuraPosition.DefaultInstance; }
    }
    
    public const int MetricFieldNumber = 5000;
    private pbc::PopsicleList<global::kuradatatypes.KuraPayload.Types.KuraMetric> metric_ = new pbc::PopsicleList<global::kuradatatypes.KuraPayload.Types.KuraMetric>();
    public scg::IList<global::kuradatatypes.KuraPayload.Types.KuraMetric> MetricList {
      get { return metric_; }
    }
    public int MetricCount {
      get { return metric_.Count; }
    }
    public global::kuradatatypes.KuraPayload.Types.KuraMetric GetMetric(int index) {
      return metric_[index];
    }
    
    public const int BodyFieldNumber = 5001;
    private bool hasBody;
    private pb::ByteString body_ = pb::ByteString.Empty;
    public bool HasBody {
      get { return hasBody; }
    }
    public pb::ByteString Body {
      get { return body_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasPosition) {
          if (!Position.IsInitialized) return false;
        }
        foreach (global::kuradatatypes.KuraPayload.Types.KuraMetric element in MetricList) {
          if (!element.IsInitialized) return false;
        }
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _kuraPayloadFieldNames;
      pb::ExtendableMessage<KuraPayload, KuraPayload.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      if (hasTimestamp) {
        output.WriteInt64(1, field_names[3], Timestamp);
      }
      if (hasPosition) {
        output.WriteMessage(2, field_names[2], Position);
      }
      extensionWriter.WriteUntil(5000, output);
      if (metric_.Count > 0) {
        output.WriteMessageArray(5000, field_names[1], metric_);
      }
      if (hasBody) {
        output.WriteBytes(5001, field_names[0], Body);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, Timestamp);
        }
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Position);
        }
        foreach (global::kuradatatypes.KuraPayload.Types.KuraMetric element in MetricList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5000, element);
        }
        if (hasBody) {
          size += pb::CodedOutputStream.ComputeBytesSize(5001, Body);
        }
        size += ExtensionsSerializedSize;
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static KuraPayload ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KuraPayload ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KuraPayload ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static KuraPayload ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static KuraPayload ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KuraPayload ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static KuraPayload ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static KuraPayload ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static KuraPayload ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static KuraPayload ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private KuraPayload MakeReadOnly() {
      metric_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(KuraPayload prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::ExtendableBuilder<KuraPayload, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(KuraPayload cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private KuraPayload result;
      
      private KuraPayload PrepareBuilder() {
        if (resultIsReadOnly) {
          KuraPayload original = result;
          result = new KuraPayload();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override KuraPayload MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::kuradatatypes.KuraPayload.Descriptor; }
      }
      
      public override KuraPayload DefaultInstanceForType {
        get { return global::kuradatatypes.KuraPayload.DefaultInstance; }
      }
      
      public override KuraPayload BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is KuraPayload) {
          return MergeFrom((KuraPayload) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(KuraPayload other) {
        if (other == global::kuradatatypes.KuraPayload.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.metric_.Count != 0) {
          result.metric_.Add(other.metric_);
        }
        if (other.HasBody) {
          Body = other.Body;
        }
          this.MergeExtensionFields(other);
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_kuraPayloadFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _kuraPayloadFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimestamp = input.ReadInt64(ref result.timestamp_);
              break;
            }
            case 18: {
              global::kuradatatypes.KuraPayload.Types.KuraPosition.Builder subBuilder = global::kuradatatypes.KuraPayload.Types.KuraPosition.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 40002: {
              input.ReadMessageArray(tag, field_name, result.metric_, global::kuradatatypes.KuraPayload.Types.KuraMetric.DefaultInstance, extensionRegistry);
              break;
            }
            case 40010: {
              result.hasBody = input.ReadBytes(ref result.body_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public long Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(long value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::kuradatatypes.KuraPayload.Types.KuraPosition Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::kuradatatypes.KuraPayload.Types.KuraPosition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::kuradatatypes.KuraPayload.Types.KuraPosition.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::kuradatatypes.KuraPayload.Types.KuraPosition value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::kuradatatypes.KuraPayload.Types.KuraPosition.DefaultInstance) {
            result.position_ = global::kuradatatypes.KuraPayload.Types.KuraPosition.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::kuradatatypes.KuraPayload.Types.KuraMetric> MetricList {
        get { return PrepareBuilder().metric_; }
      }
      public int MetricCount {
        get { return result.MetricCount; }
      }
      public global::kuradatatypes.KuraPayload.Types.KuraMetric GetMetric(int index) {
        return result.GetMetric(index);
      }
      public Builder SetMetric(int index, global::kuradatatypes.KuraPayload.Types.KuraMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.metric_[index] = value;
        return this;
      }
      public Builder SetMetric(int index, global::kuradatatypes.KuraPayload.Types.KuraMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.metric_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMetric(global::kuradatatypes.KuraPayload.Types.KuraMetric value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.metric_.Add(value);
        return this;
      }
      public Builder AddMetric(global::kuradatatypes.KuraPayload.Types.KuraMetric.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.metric_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMetric(scg::IEnumerable<global::kuradatatypes.KuraPayload.Types.KuraMetric> values) {
        PrepareBuilder();
        result.metric_.Add(values);
        return this;
      }
      public Builder ClearMetric() {
        PrepareBuilder();
        result.metric_.Clear();
        return this;
      }
      
      public bool HasBody {
        get { return result.hasBody; }
      }
      public pb::ByteString Body {
        get { return result.Body; }
        set { SetBody(value); }
      }
      public Builder SetBody(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBody = true;
        result.body_ = value;
        return this;
      }
      public Builder ClearBody() {
        PrepareBuilder();
        result.hasBody = false;
        result.body_ = pb::ByteString.Empty;
        return this;
      }
    }
    static KuraPayload() {
      object.ReferenceEquals(global::kuradatatypes.Kurapayload.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
