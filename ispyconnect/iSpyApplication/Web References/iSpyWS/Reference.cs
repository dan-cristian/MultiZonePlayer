//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17379.
// 
#pragma warning disable 1591

namespace iSpyApplication.iSpyWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="iSpySecureSoap", Namespace="http://ispyconnect.com/")]
    public partial class iSpySecure : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback TestConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoteAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback EncryptOperationCompleted;
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private System.Threading.SendOrPostCallback PingAliveOperationCompleted;
        
        private System.Threading.SendOrPostCallback PingAlive2OperationCompleted;
        
        private System.Threading.SendOrPostCallback PingAlive3OperationCompleted;
        
        private System.Threading.SendOrPostCallback DisconnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback SyncOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendAlertWithImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendFrameGrabOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendTweetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductLatestVersionGetOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public iSpySecure() {
            this.Url = "https://www.ispyconnect.com/webservices/ispysecure.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event TestConnectionCompletedEventHandler TestConnectionCompleted;
        
        /// <remarks/>
        public event RemoteAddressCompletedEventHandler RemoteAddressCompleted;
        
        /// <remarks/>
        public event ConnectCompletedEventHandler ConnectCompleted;
        
        /// <remarks/>
        public event EncryptCompletedEventHandler EncryptCompleted;
        
        /// <remarks/>
        public event PingCompletedEventHandler PingCompleted;
        
        /// <remarks/>
        public event PingAliveCompletedEventHandler PingAliveCompleted;
        
        /// <remarks/>
        public event PingAlive2CompletedEventHandler PingAlive2Completed;
        
        /// <remarks/>
        public event PingAlive3CompletedEventHandler PingAlive3Completed;
        
        /// <remarks/>
        public event DisconnectCompletedEventHandler DisconnectCompleted;
        
        /// <remarks/>
        public event SyncCompletedEventHandler SyncCompleted;
        
        /// <remarks/>
        public event SendContentCompletedEventHandler SendContentCompleted;
        
        /// <remarks/>
        public event SendAlertCompletedEventHandler SendAlertCompleted;
        
        /// <remarks/>
        public event SendAlertWithImageCompletedEventHandler SendAlertWithImageCompleted;
        
        /// <remarks/>
        public event SendSMSCompletedEventHandler SendSMSCompleted;
        
        /// <remarks/>
        public event SendFrameGrabCompletedEventHandler SendFrameGrabCompleted;
        
        /// <remarks/>
        public event SendMMSCompletedEventHandler SendMMSCompleted;
        
        /// <remarks/>
        public event SendTweetCompletedEventHandler SendTweetCompleted;
        
        /// <remarks/>
        public event ProductLatestVersionGetCompletedEventHandler ProductLatestVersionGetCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/TestConnection", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] TestConnection(string username, string password, int port, string identifier, bool tryLoopback, bool bIPv4, string ipAddress) {
            object[] results = this.Invoke("TestConnection", new object[] {
                        username,
                        password,
                        port,
                        identifier,
                        tryLoopback,
                        bIPv4,
                        ipAddress});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void TestConnectionAsync(string username, string password, int port, string identifier, bool tryLoopback, bool bIPv4, string ipAddress) {
            this.TestConnectionAsync(username, password, port, identifier, tryLoopback, bIPv4, ipAddress, null);
        }
        
        /// <remarks/>
        public void TestConnectionAsync(string username, string password, int port, string identifier, bool tryLoopback, bool bIPv4, string ipAddress, object userState) {
            if ((this.TestConnectionOperationCompleted == null)) {
                this.TestConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestConnectionOperationCompleted);
            }
            this.InvokeAsync("TestConnection", new object[] {
                        username,
                        password,
                        port,
                        identifier,
                        tryLoopback,
                        bIPv4,
                        ipAddress}, this.TestConnectionOperationCompleted, userState);
        }
        
        private void OnTestConnectionOperationCompleted(object arg) {
            if ((this.TestConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestConnectionCompleted(this, new TestConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/RemoteAddress", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoteAddress() {
            object[] results = this.Invoke("RemoteAddress", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoteAddressAsync() {
            this.RemoteAddressAsync(null);
        }
        
        /// <remarks/>
        public void RemoteAddressAsync(object userState) {
            if ((this.RemoteAddressOperationCompleted == null)) {
                this.RemoteAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoteAddressOperationCompleted);
            }
            this.InvokeAsync("RemoteAddress", new object[0], this.RemoteAddressOperationCompleted, userState);
        }
        
        private void OnRemoteAddressOperationCompleted(object arg) {
            if ((this.RemoteAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoteAddressCompleted(this, new RemoteAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/Connect", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Connect(string username, string password, int port, string identifier, bool tryLoopBack, string version, string computerName, bool bIPv4, string ipAddress) {
            object[] results = this.Invoke("Connect", new object[] {
                        username,
                        password,
                        port,
                        identifier,
                        tryLoopBack,
                        version,
                        computerName,
                        bIPv4,
                        ipAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConnectAsync(string username, string password, int port, string identifier, bool tryLoopBack, string version, string computerName, bool bIPv4, string ipAddress) {
            this.ConnectAsync(username, password, port, identifier, tryLoopBack, version, computerName, bIPv4, ipAddress, null);
        }
        
        /// <remarks/>
        public void ConnectAsync(string username, string password, int port, string identifier, bool tryLoopBack, string version, string computerName, bool bIPv4, string ipAddress, object userState) {
            if ((this.ConnectOperationCompleted == null)) {
                this.ConnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectOperationCompleted);
            }
            this.InvokeAsync("Connect", new object[] {
                        username,
                        password,
                        port,
                        identifier,
                        tryLoopBack,
                        version,
                        computerName,
                        bIPv4,
                        ipAddress}, this.ConnectOperationCompleted, userState);
        }
        
        private void OnConnectOperationCompleted(object arg) {
            if ((this.ConnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectCompleted(this, new ConnectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/Encrypt", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Encrypt(string toEncrypt) {
            object[] results = this.Invoke("Encrypt", new object[] {
                        toEncrypt});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EncryptAsync(string toEncrypt) {
            this.EncryptAsync(toEncrypt, null);
        }
        
        /// <remarks/>
        public void EncryptAsync(string toEncrypt, object userState) {
            if ((this.EncryptOperationCompleted == null)) {
                this.EncryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptOperationCompleted);
            }
            this.InvokeAsync("Encrypt", new object[] {
                        toEncrypt}, this.EncryptOperationCompleted, userState);
        }
        
        private void OnEncryptOperationCompleted(object arg) {
            if ((this.EncryptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EncryptCompleted(this, new EncryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/Ping", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Ping() {
            object[] results = this.Invoke("Ping", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        /// <remarks/>
        public void PingAsync(object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingOperationCompleted);
            }
            this.InvokeAsync("Ping", new object[0], this.PingOperationCompleted, userState);
        }
        
        private void OnPingOperationCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/PingAlive", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PingAlive(int port, bool bIPv4, string ipAddress) {
            object[] results = this.Invoke("PingAlive", new object[] {
                        port,
                        bIPv4,
                        ipAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PingAliveAsync(int port, bool bIPv4, string ipAddress) {
            this.PingAliveAsync(port, bIPv4, ipAddress, null);
        }
        
        /// <remarks/>
        public void PingAliveAsync(int port, bool bIPv4, string ipAddress, object userState) {
            if ((this.PingAliveOperationCompleted == null)) {
                this.PingAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingAliveOperationCompleted);
            }
            this.InvokeAsync("PingAlive", new object[] {
                        port,
                        bIPv4,
                        ipAddress}, this.PingAliveOperationCompleted, userState);
        }
        
        private void OnPingAliveOperationCompleted(object arg) {
            if ((this.PingAliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingAliveCompleted(this, new PingAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/PingAlive2", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] PingAlive2(string username, string password, int port) {
            object[] results = this.Invoke("PingAlive2", new object[] {
                        username,
                        password,
                        port});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void PingAlive2Async(string username, string password, int port) {
            this.PingAlive2Async(username, password, port, null);
        }
        
        /// <remarks/>
        public void PingAlive2Async(string username, string password, int port, object userState) {
            if ((this.PingAlive2OperationCompleted == null)) {
                this.PingAlive2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingAlive2OperationCompleted);
            }
            this.InvokeAsync("PingAlive2", new object[] {
                        username,
                        password,
                        port}, this.PingAlive2OperationCompleted, userState);
        }
        
        private void OnPingAlive2OperationCompleted(object arg) {
            if ((this.PingAlive2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingAlive2Completed(this, new PingAlive2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/PingAlive3", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] PingAlive3(string username, string password, int port, bool ipv4, string ipexternal) {
            object[] results = this.Invoke("PingAlive3", new object[] {
                        username,
                        password,
                        port,
                        ipv4,
                        ipexternal});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void PingAlive3Async(string username, string password, int port, bool ipv4, string ipexternal) {
            this.PingAlive3Async(username, password, port, ipv4, ipexternal, null);
        }
        
        /// <remarks/>
        public void PingAlive3Async(string username, string password, int port, bool ipv4, string ipexternal, object userState) {
            if ((this.PingAlive3OperationCompleted == null)) {
                this.PingAlive3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingAlive3OperationCompleted);
            }
            this.InvokeAsync("PingAlive3", new object[] {
                        username,
                        password,
                        port,
                        ipv4,
                        ipexternal}, this.PingAlive3OperationCompleted, userState);
        }
        
        private void OnPingAlive3OperationCompleted(object arg) {
            if ((this.PingAlive3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingAlive3Completed(this, new PingAlive3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/Disconnect", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Disconnect(string username, string password, int port) {
            object[] results = this.Invoke("Disconnect", new object[] {
                        username,
                        password,
                        port});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DisconnectAsync(string username, string password, int port) {
            this.DisconnectAsync(username, password, port, null);
        }
        
        /// <remarks/>
        public void DisconnectAsync(string username, string password, int port, object userState) {
            if ((this.DisconnectOperationCompleted == null)) {
                this.DisconnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisconnectOperationCompleted);
            }
            this.InvokeAsync("Disconnect", new object[] {
                        username,
                        password,
                        port}, this.DisconnectOperationCompleted, userState);
        }
        
        private void OnDisconnectOperationCompleted(object arg) {
            if ((this.DisconnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisconnectCompleted(this, new DisconnectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/Sync", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Sync(string username, string password, int port, string internalIPAddress, int internalPort, string objectList, bool bIPv4, string ipAddress) {
            object[] results = this.Invoke("Sync", new object[] {
                        username,
                        password,
                        port,
                        internalIPAddress,
                        internalPort,
                        objectList,
                        bIPv4,
                        ipAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SyncAsync(string username, string password, int port, string internalIPAddress, int internalPort, string objectList, bool bIPv4, string ipAddress) {
            this.SyncAsync(username, password, port, internalIPAddress, internalPort, objectList, bIPv4, ipAddress, null);
        }
        
        /// <remarks/>
        public void SyncAsync(string username, string password, int port, string internalIPAddress, int internalPort, string objectList, bool bIPv4, string ipAddress, object userState) {
            if ((this.SyncOperationCompleted == null)) {
                this.SyncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSyncOperationCompleted);
            }
            this.InvokeAsync("Sync", new object[] {
                        username,
                        password,
                        port,
                        internalIPAddress,
                        internalPort,
                        objectList,
                        bIPv4,
                        ipAddress}, this.SyncOperationCompleted, userState);
        }
        
        private void OnSyncOperationCompleted(object arg) {
            if ((this.SyncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SyncCompleted(this, new SyncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/SendContent", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendContent(string username, string password, string emailAddress, string subject, string message) {
            object[] results = this.Invoke("SendContent", new object[] {
                        username,
                        password,
                        emailAddress,
                        subject,
                        message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendContentAsync(string username, string password, string emailAddress, string subject, string message) {
            this.SendContentAsync(username, password, emailAddress, subject, message, null);
        }
        
        /// <remarks/>
        public void SendContentAsync(string username, string password, string emailAddress, string subject, string message, object userState) {
            if ((this.SendContentOperationCompleted == null)) {
                this.SendContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendContentOperationCompleted);
            }
            this.InvokeAsync("SendContent", new object[] {
                        username,
                        password,
                        emailAddress,
                        subject,
                        message}, this.SendContentOperationCompleted, userState);
        }
        
        private void OnSendContentOperationCompleted(object arg) {
            if ((this.SendContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendContentCompleted(this, new SendContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/SendAlert", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendAlert(string username, string password, string emailAddress, string alertSubject, string alertBody) {
            object[] results = this.Invoke("SendAlert", new object[] {
                        username,
                        password,
                        emailAddress,
                        alertSubject,
                        alertBody});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendAlertAsync(string username, string password, string emailAddress, string alertSubject, string alertBody) {
            this.SendAlertAsync(username, password, emailAddress, alertSubject, alertBody, null);
        }
        
        /// <remarks/>
        public void SendAlertAsync(string username, string password, string emailAddress, string alertSubject, string alertBody, object userState) {
            if ((this.SendAlertOperationCompleted == null)) {
                this.SendAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendAlertOperationCompleted);
            }
            this.InvokeAsync("SendAlert", new object[] {
                        username,
                        password,
                        emailAddress,
                        alertSubject,
                        alertBody}, this.SendAlertOperationCompleted, userState);
        }
        
        private void OnSendAlertOperationCompleted(object arg) {
            if ((this.SendAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendAlertCompleted(this, new SendAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/SendAlertWithImage", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendAlertWithImage(string username, string password, string emailAddress, string alertSubject, string alertBody, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] imageData) {
            object[] results = this.Invoke("SendAlertWithImage", new object[] {
                        username,
                        password,
                        emailAddress,
                        alertSubject,
                        alertBody,
                        imageData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendAlertWithImageAsync(string username, string password, string emailAddress, string alertSubject, string alertBody, byte[] imageData) {
            this.SendAlertWithImageAsync(username, password, emailAddress, alertSubject, alertBody, imageData, null);
        }
        
        /// <remarks/>
        public void SendAlertWithImageAsync(string username, string password, string emailAddress, string alertSubject, string alertBody, byte[] imageData, object userState) {
            if ((this.SendAlertWithImageOperationCompleted == null)) {
                this.SendAlertWithImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendAlertWithImageOperationCompleted);
            }
            this.InvokeAsync("SendAlertWithImage", new object[] {
                        username,
                        password,
                        emailAddress,
                        alertSubject,
                        alertBody,
                        imageData}, this.SendAlertWithImageOperationCompleted, userState);
        }
        
        private void OnSendAlertWithImageOperationCompleted(object arg) {
            if ((this.SendAlertWithImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendAlertWithImageCompleted(this, new SendAlertWithImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/SendSMS", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendSMS(string username, string password, string smsNumber, string message) {
            object[] results = this.Invoke("SendSMS", new object[] {
                        username,
                        password,
                        smsNumber,
                        message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendSMSAsync(string username, string password, string smsNumber, string message) {
            this.SendSMSAsync(username, password, smsNumber, message, null);
        }
        
        /// <remarks/>
        public void SendSMSAsync(string username, string password, string smsNumber, string message, object userState) {
            if ((this.SendSMSOperationCompleted == null)) {
                this.SendSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSMSOperationCompleted);
            }
            this.InvokeAsync("SendSMS", new object[] {
                        username,
                        password,
                        smsNumber,
                        message}, this.SendSMSOperationCompleted, userState);
        }
        
        private void OnSendSMSOperationCompleted(object arg) {
            if ((this.SendSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSMSCompleted(this, new SendSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/SendFrameGrab", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendFrameGrab(string username, string password, string emailAddress, string subject, string body, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] imageData) {
            object[] results = this.Invoke("SendFrameGrab", new object[] {
                        username,
                        password,
                        emailAddress,
                        subject,
                        body,
                        imageData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendFrameGrabAsync(string username, string password, string emailAddress, string subject, string body, byte[] imageData) {
            this.SendFrameGrabAsync(username, password, emailAddress, subject, body, imageData, null);
        }
        
        /// <remarks/>
        public void SendFrameGrabAsync(string username, string password, string emailAddress, string subject, string body, byte[] imageData, object userState) {
            if ((this.SendFrameGrabOperationCompleted == null)) {
                this.SendFrameGrabOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendFrameGrabOperationCompleted);
            }
            this.InvokeAsync("SendFrameGrab", new object[] {
                        username,
                        password,
                        emailAddress,
                        subject,
                        body,
                        imageData}, this.SendFrameGrabOperationCompleted, userState);
        }
        
        private void OnSendFrameGrabOperationCompleted(object arg) {
            if ((this.SendFrameGrabCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendFrameGrabCompleted(this, new SendFrameGrabCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/SendMMS", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMMS(string username, string password, string smsNumber, string message, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] imageData) {
            object[] results = this.Invoke("SendMMS", new object[] {
                        username,
                        password,
                        smsNumber,
                        message,
                        imageData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMMSAsync(string username, string password, string smsNumber, string message, byte[] imageData) {
            this.SendMMSAsync(username, password, smsNumber, message, imageData, null);
        }
        
        /// <remarks/>
        public void SendMMSAsync(string username, string password, string smsNumber, string message, byte[] imageData, object userState) {
            if ((this.SendMMSOperationCompleted == null)) {
                this.SendMMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMMSOperationCompleted);
            }
            this.InvokeAsync("SendMMS", new object[] {
                        username,
                        password,
                        smsNumber,
                        message,
                        imageData}, this.SendMMSOperationCompleted, userState);
        }
        
        private void OnSendMMSOperationCompleted(object arg) {
            if ((this.SendMMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMMSCompleted(this, new SendMMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/SendTweet", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendTweet(string username, string password, string message) {
            object[] results = this.Invoke("SendTweet", new object[] {
                        username,
                        password,
                        message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendTweetAsync(string username, string password, string message) {
            this.SendTweetAsync(username, password, message, null);
        }
        
        /// <remarks/>
        public void SendTweetAsync(string username, string password, string message, object userState) {
            if ((this.SendTweetOperationCompleted == null)) {
                this.SendTweetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendTweetOperationCompleted);
            }
            this.InvokeAsync("SendTweet", new object[] {
                        username,
                        password,
                        message}, this.SendTweetOperationCompleted, userState);
        }
        
        private void OnSendTweetOperationCompleted(object arg) {
            if ((this.SendTweetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendTweetCompleted(this, new SendTweetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ispyconnect.com/ProductLatestVersionGet", RequestNamespace="http://ispyconnect.com/", ResponseNamespace="http://ispyconnect.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProductLatestVersionGet(int productId) {
            object[] results = this.Invoke("ProductLatestVersionGet", new object[] {
                        productId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProductLatestVersionGetAsync(int productId) {
            this.ProductLatestVersionGetAsync(productId, null);
        }
        
        /// <remarks/>
        public void ProductLatestVersionGetAsync(int productId, object userState) {
            if ((this.ProductLatestVersionGetOperationCompleted == null)) {
                this.ProductLatestVersionGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductLatestVersionGetOperationCompleted);
            }
            this.InvokeAsync("ProductLatestVersionGet", new object[] {
                        productId}, this.ProductLatestVersionGetOperationCompleted, userState);
        }
        
        private void OnProductLatestVersionGetOperationCompleted(object arg) {
            if ((this.ProductLatestVersionGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductLatestVersionGetCompleted(this, new ProductLatestVersionGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void TestConnectionCompletedEventHandler(object sender, TestConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void RemoteAddressCompletedEventHandler(object sender, RemoteAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoteAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoteAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void ConnectCompletedEventHandler(object sender, ConnectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void EncryptCompletedEventHandler(object sender, EncryptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EncryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EncryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void PingAliveCompletedEventHandler(object sender, PingAliveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void PingAlive2CompletedEventHandler(object sender, PingAlive2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingAlive2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingAlive2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void PingAlive3CompletedEventHandler(object sender, PingAlive3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingAlive3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingAlive3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void DisconnectCompletedEventHandler(object sender, DisconnectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisconnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DisconnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void SyncCompletedEventHandler(object sender, SyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SyncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SyncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void SendContentCompletedEventHandler(object sender, SendContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void SendAlertCompletedEventHandler(object sender, SendAlertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendAlertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendAlertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void SendAlertWithImageCompletedEventHandler(object sender, SendAlertWithImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendAlertWithImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendAlertWithImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void SendSMSCompletedEventHandler(object sender, SendSMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void SendFrameGrabCompletedEventHandler(object sender, SendFrameGrabCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendFrameGrabCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendFrameGrabCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void SendMMSCompletedEventHandler(object sender, SendMMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void SendTweetCompletedEventHandler(object sender, SendTweetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendTweetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendTweetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    public delegate void ProductLatestVersionGetCompletedEventHandler(object sender, ProductLatestVersionGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17379")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductLatestVersionGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductLatestVersionGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591